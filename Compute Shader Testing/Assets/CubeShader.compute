// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Cube {
    float3 position;
    float4 color;
};

// // Create a RenderTexture with enableRandomWrite flag and set it
// // with cs.SetTexture
// RWTexture2D<float4> Result;

// function inputs set by the C# calling script
RWStructuredBuffer<Cube> cubes;
float resolution;
float repetitions;
float colorSpeed;

// random number generation function
float rand(float2 co) {
    return (frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453)) * 1;
}

// does not actually change position or color, updates DATA that we then USE in C# script to change position and color
[numthreads(10, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float xPos = id.x / resolution;
    Cube cube = cubes[id.x];

    for (int i =  0; i < repetitions; i++) {

        // generate and set new random position data for a given cube
        float zPos = rand(float2(xPos, cube.position.z)) / 3;
        cube.position.z = zPos;

        // increment color data for the given cube
        float r = cube.color.r + colorSpeed > 0.85 ? 0.15 : cube.color.r + colorSpeed;
        float g = cube.color.g + colorSpeed > 0.85 ? 0.15 : cube.color.g + colorSpeed;
        float b = cube.color.b + colorSpeed > 0.85 ? 0.15 : cube.color.b + colorSpeed;

        // set the color data
        cube.color = float4(r, g, b, 1.0);
    }
    cubes[id.x] = cube;
}
